pData <- read.csv("./data/ss06pid.csv")
boxplot(pData$AGEP, col="blue")
boxplot(pData$AGEP ~ as.factor(pData$DDRS), col="blue")
boxplot(pData$AGEP ~ as.factor(pData$DDRS), col=c("blue", "orange"), names=c("yes", "no"), varwidth=T)
boxplot(pData$AGEP ~ as.factor(pData$DDRS), col=c("blue", "orange"), names=c("yes", "no"), varwidth=T)
hist(pData$AGEP, col="blue")
dens <- density(pData$AGEP)
source('~/.active-rstudio-document', echo=TRUE)
dens <- density(pData$AGEP)
plot(dens, lwd=3, col="blue")
lines(densMales, lwd=3, col="orange")
plot(dens, lwd=3, col="blue")
lines(densMales, lwd=3, col="orange")
source('~/.active-rstudio-document', echo=TRUE)
densMales <- density(pData$AGEP[which(pData$SEX == 1)])
plot(dens, lwd=3, col="blue")
plot(dens, lwd=3, col="blue")
lines(densMales, lwd=3, col="orange")
plot(pData$JWMNP, pData$WAGP, pch=19, col="blue")
plot(pData$JWMNP, pData$WAGP, pch=19, col="blue")
plot(pData$JWMNP, pData$WAGP, pch=19, col=pData$SEX, cex=0.5)
plot(pData$JWMNP, pData$WAGP, pch=19, col="blue", cex=0.5)
lines(rep(100, dim(pData)[1]), pData$WAGP, col="grey", lwd=5)
points(seq(0, 200, length=100), seq(0, 20e5, length=100), col="red", pch=19)
library(Hmisc)
ageGroups <- cut2(pData$AGEP, g=5)
plot(pData$JWMNP, pData$WAGP, pch=19, col=ageGroups, cex=0.5)
install.packages("hexbin")
?t
library(maps)
map("world")
lat <- runif(40, -180, 180)
lon <- runif(40, -90, 90)
points(lat, lon, col="blue", pch=19)
library(maps)
install.packages("maps")
library(maps)
map("world")
lat <- runif(40, -180, 180)
lon <- runif(40, -90, 90)
points(lat, lon, col="blue", pch=19)
boxplot(x ~ as.factor(is.na(y)))
x <- rnorm(100)
y <- rnorm(100)
x[x < 0] <- NA
boxplot(x ~ as.factor(is.na(y)))
boxplot(x ~ as.factor(is.na(y)), names=c("yes", "no"))
x[x < 0] <- NA
boxplot(x ~ as.factor(is.na(y)), names=c("yes", "no"))
boxplot(x ~ as.factor(is.na(y)))
as.factor(is.na(y))
x <- rnorm(100)
y <- rnorm(100)
x[x < 0] <- NA
boxplot(x ~ as.factor(is.na(y)))
x[x < 3] <- NA
boxplot(x ~ as.factor(is.na(y)))
x <- rnorm(100)
y <- rnorm(100)
x[x < 3] <- NA
boxplot(x ~ is.na(y))
x <- rnorm(100)
y <- rnorm(100)
x[x < 3] <- NA
boxplot(x ~ is.na(y))
x
x[x < 0] <- NA
x <- rnorm(100)
y <- rnorm(100)
x[x < 0] <- NA
x
boxplot(x ~ is.na(y))
y[x < 0] <- NA
x <- rnorm(100)
y <- rnorm(100)
y[x < 0] <- NA
boxplot(x ~ is.na(y))
set.seed(10)
x <- rnorm(100)
y <- rnorm(100)
y[x < 0] <- NA
boxplot(x ~ is.na(y))
set.seed(8)
x <- rnorm(100)
y <- rnorm(100)
y[x < 0] <- NA
boxplot(x ~ is.na(y))
install.packages("corpcor")
install.packages("impute")
source("http://bioconductor.org/biocLite.R")
biocLite("impute")
biocLite("impute")
install.packages("C:\Users\jz\AppData\Local\Temp\RtmpYJ4ZTc\downloaded_packages\impute_1.32.0.zip")
install.packages("C:\Users\jz\AppData\Local\Temp\RtmpYJ4ZTc\downloaded_packages\impute_1.32.0.zip")
install.packages("C:/Users/jz/AppData/Local/Temp/RtmpYJ4ZTc/downloaded_packages/impute_1.32.0.zip")
library(datasets)
data(iris)
is <- iris[,1:4]
is
distxy <- dist(is)
hClustering <- hclust(distxy)
plot(hClustering)
myplclust <- function(hclust, lab = hclust$labels, lab.col = rep(1, length(hclust$labels)),
hang = 0.1, ...) {
y <- rep(hclust$height, 2)
x <- as.numeric(hclust$merge)
y <- y[which(x < 0)]
x <- x[which(x < 0)]
x <- abs(x)
y <- y[order(x)]
x <- x[order(x)]
plot(hclust, labels = F, hang = hang, ...)
text(x = x, y = y[hclust$order] - (max(hclust$height) * hang), labels = lab[hclust$order],
col = lab.col[hclust$order], srt = 90, adj = c(1, 0.5), xpd = NA, ...)
}
myplclust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each = 4))
myplclust(hClustering, lab = rep(1:10, each = 4), lab.col = rep(1:3, each = 4))
?rep
rep(1:3, each=4)
myplclust(hClustering
myplclust(hClustering)
myplclust(hClustering)
myplclust(hClustering)
myplclust(hClustering, lab = rep(1:10, each = 4), lab.col = rep(1, length(hclu$labels)))
myplclust(hClustering, lab = rep(1:10, each = 4), lab.col = rep(1, length(hclustering$labels)))
myplclust(hClustering, lab = rep(1:10, each = 4), lab.col = rep(1, length(hClustering$labels)))
plot(hClustering)
line(0, 3)
lines(0, 3)
lines(0, c(1, 2, 3, 4, 5, 6))
lines(rep(1:50), 0)
abline(3, 0)
data("https://spark-public.s3.amazonaws.com/dataanalysis/quiz3question4.rda")
datarda <- data(f)
f <- download.file("https://spark-public.s3.amazonaws.com/dataanalysis/quiz3question4.rda")
f <- download.file("https://spark-public.s3.amazonaws.com/dataanalysis/quiz3question4.rda", destfile="quiz3question4.rda")
datarda <- data(f)
datarda <- load(f)
datarda <- load("quiz3question4.rda")
datacsv <- read.csv("https://spark-public.s3.amazonaws.com/dataanalysis/quiz3question4.csv")
datacsv <- read.csv("https://spark-public.s3.amazonaws.com/dataanalysis/quiz3question4.csv")
data <- read.csv("https://spark-public.s3.amazonaws.com/dataanalysis/quiz3question4.csv")
data <- read.csv("https://spark-public.s3.amazonaws.com/dataanalysis/quiz3question4.csv")
plot(data)
plot(data, pch=19)
plot(data$x)
plot(data$x, data$y)
data
?par
km <- kmeans(data, centers = 2)
plot(data$x, data$y, col = km$cluster, pch = 19, cex = 2))
plot(data$x, data$y, col = km$cluster, pch = 19, cex = 2)
points(km$centers, col = 2:3, pch = 3, cex = 3, lwd = 3)
points(km$centers, col = 2:3, pch = 3, cex = 3, lwd = 1)
plot(data$x, data$y, col = km$cluster, pch = 19, cex = 1)
head(data)
km$clusters
km$cluster
km$center
points(km$centers, col = 2:3, pch = 3, cex = 3, lwd = 1)
points(km$centers, col = 1:2, pch = 4, cex = 3, lwd = 3)
points(km$centers, col = 1:2, pch = 4, cex = 3, lwd = 3)
plot(data$x, data$y, col = km$cluster, pch = 19, cex = 1)
points(km$centers, col = 1:2, pch = 4, cex = 3, lwd = 3)
plot(data$x[10,], data$y[10,], col = km$cluster, pch = 19, cex = 1)
plot(data$x[10:20,], data$y[10:20,], col = km$cluster, pch = 19, cex = 1)
plot(data$x, data$y, col = km$cluster, pch = 19, cex = 1)
points(km$centers, col = 1:2, pch = 4, cex = 3, lwd = 3)
library(ElemStatLearn)
data(zip.train)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(zip.train)
im = zip2image(zip.train,3)
image(im)
?zip2image
im = zip2image(zip.train,8)
image(im)
im = zip2image(zip.train,18)
im = zip2image(zip.train,c(8, 18))
image(im)
i8s <- svd(i8)
i8 = zip2image(zip.train, 8)
i18 =zip2image(zip.train, 18)
i8s <- svd(i8)
i18s <- svd(i18)
par(mfrow = c(2, 2))
plot(i82$u[, 1], 16:1, , xlab = "Row", ylab = "First left singular vector - u",
pch = 19)
plot(i8s$u[, 1], 16:1, , xlab = "Row", ylab = "First left singular vector - u",
pch = 19)
plot(i8s$v[, 1], xlab = "Column", ylab = "First right singular vector - v",
pch = 19)
plot(i8s$d, xlab = "Column", ylab = "Singular value", pch = 19)
plot(i8s$d^2/sum(svd1$d^2), xlab = "Column", ylab = "Percent of variance explained",
pch = 19)
pch = 19)
plot(i8s$d^2/sum(i8s$d^2), xlab = "Column", ylab = "Percent of variance explained",
pch = 19)
par(mfrow = c(2, 2))
plot(i18s$u[, 1], 16:1, , xlab = "Row", ylab = "First left singular vector - u",
pch = 19)
plot(i18s$v[, 1], xlab = "Column", ylab = "First right singular vector - v",
pch = 19)
plot(i18s$d, xlab = "Column", ylab = "Singular value", pch = 19)
plot(i18s$d^2/sum(i18s$d^2), xlab = "Column", ylab = "Percent of variance explained",
pch = 19)
par(mfrow = c(2, 2))
image(t(i8s)[, nrow(i8s):1])
image(t(i18s)[, nrow(i18s):1])
image(zip2image(i8s))
image(zip2image(i8s), 8)
image(zip2image(i8s), 1)
i8s
i8s
image(t(i8s)[, nrow(i8s):1])
par(mfrow = c(1, 2))
plot(i8s$d^2/sum(i8s$d^2), xlab = "Column", ylab = "Percent of variance explained",
pch = 19)
plot(i18s$d^2/sum(i18s$d^2), xlab = "Column", ylab = "Percent of variance explained",
pch = 19)
par(mfrow = c(2, 2))
plot(i8s$u[, 1], 16:1, , xlab = "Row", ylab = "First left singular vector - u",
pch = 19)
plot(i8s$v[, 1], xlab = "Column", ylab = "First right singular vector - v",
pch = 19)
plot(i8s$d, xlab = "Column", ylab = "Singular value", pch = 19)
plot(i8s$d^2/sum(i8s$d^2), xlab = "Column", ylab = "Percent of variance explained",
pch = 19)
par(mfrow = c(2, 2))
plot(i18s$u[, 1], 16:1, , xlab = "Row", ylab = "First left singular vector - u",
pch = 19)
plot(i18s$v[, 1], xlab = "Column", ylab = "First right singular vector - v",
pch = 19)
plot(i18s$d, xlab = "Column", ylab = "Singular value", pch = 19)
plot(i18s$d^2/sum(i18s$d^2), xlab = "Column", ylab = "Percent of variance explained",
pch = 19)
par(mfrow = c(1, 2))
par(mfrow = c(2, 2))
plot(i8s$u[, 1], 16:1, , xlab = "Row", ylab = "First left singular vector - u",
pch = 19)
plot(i8s$v[, 1], xlab = "Column", ylab = "First right singular vector - v",
pch = 19)
plot(i8s$d, xlab = "Column", ylab = "Singular value", pch = 19)
plot(i8s$d^2/sum(i8s$d^2), xlab = "Column", ylab = "Percent of variance explained",
pch = 19)
par(mfrow = c(2, 2))
plot(i18s$u[, 1], 16:1, , xlab = "Row", ylab = "First left singular vector - u",
pch = 19)
plot(i18s$v[, 1], xlab = "Column", ylab = "First right singular vector - v",
pch = 19)
plot(i18s$d, xlab = "Column", ylab = "Singular value", pch = 19)
plot(i18s$d^2/sum(i18s$d^2), xlab = "Column", ylab = "Percent of variance explained",
pch = 19)
par(mfrow = c(2, 2))
plot(i8s$u[, 1], 16:1, , xlab = "Row", ylab = "First left singular vector - u",
pch = 19)
plot(i8s$v[, 1], xlab = "Column", ylab = "First right singular vector - v",
pch = 19)
plot(i8s$d, xlab = "Column", ylab = "Singular value", pch = 19)
plot(i8s$d^2/sum(i8s$d^2), xlab = "Column", ylab = "Percent of variance explained",
pch = 19)
par(mfrow = c(2, 2))
plot(i18s$u[, 1], 16:1, , xlab = "Row", ylab = "First left singular vector - u",
pch = 19)
plot(i18s$v[, 1], xlab = "Column", ylab = "First right singular vector - v",
pch = 19)
plot(i18s$d, xlab = "Column", ylab = "Singular value", pch = 19)
plot(i18s$d^2/sum(i18s$d^2), xlab = "Column", ylab = "Percent of variance explained",
pch = 19)
zip2image(i8)
i8 = zip2image(zip.train, 8)
i18 =zip2image(zip.train, 18)
zip2image(i8)
image(i8)
image(i18)
par(mfrow = c(2, 1))
image(i8)
image(i18)
par(mfrow = c(2, 2))
plot(i8s$u[, 1], 16:1, , xlab = "Row", ylab = "First left singular vector - u",
pch = 19)
plot(i8s$v[, 1], xlab = "Column", ylab = "First right singular vector - v",
pch = 19)
plot(i8s$d, xlab = "Column", ylab = "Singular value", pch = 19)
plot(i8s$d^2/sum(i8s$d^2), xlab = "Column", ylab = "Percent of variance explained",
pch = 19)
par(mfrow = c(2, 2))
plot(i18s$u[, 1], 16:1, , xlab = "Row", ylab = "First left singular vector - u",
pch = 19)
plot(i18s$v[, 1], xlab = "Column", ylab = "First right singular vector - v",
pch = 19)
plot(i18s$d, xlab = "Column", ylab = "Singular value", pch = 19)
plot(i18s$d^2/sum(i18s$d^2), xlab = "Column", ylab = "Percent of variance explained",
pch = 19)
i8s$d^2/sum(i8s$d^2)
