library(ggplot2)
summary(cars)
qplot(speed, dist, data=cars) + geom_smooth()
library(kernlab)
data(spam)
dim(spam)
install.packages("kernlab")
trainSpam = spam[trainIndicator=1,]
table(trainSpam$type)
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x, y) {sum(x != (y > 0.5))}
cvError = rep(NA, 55)
library(boot)
for(i in 1:55) {
lmFormula = as.formula(paste("numType~",
names(trainSpam)[i],
sep=""))
glmFit = glm(lmFormula, family="binomial",
data=trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit,
costFunction, 2)$delta[2]
}
which.min(cvError)
costFunction = function(x, y) {sum(x != (y > 0.5))}
cvError = rep(NA, 55)
library(boot)
for(i in 1:55) {
lmFormula = as.formula(paste("numType~",
names(trainSpam)[i],
sep=""))
glmFit = glm(lmFormula, family="binomial",
data=trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit,
costFunction, 2)$delta[2]
}
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x, y) {sum(x != (y > 0.5))}
library(kernlab)
data(spam)
trainSpam = spam[trainIndicator==1,]
testSpam = spam[trainIndicator==0,]
set.seed(3435)
trainIndicator = rbinom(4601, size=1, prob=0.5)
trainSpam = spam[trainIndicator==1,]
testSpam = spam[trainIndicator==0,]
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x, y) {sum(x != (y > 0.5))}
cvError = rep(NA, 55)
library(boot)
for(i in 1:55) {
lmFormula = as.formula(paste("numType~",
names(trainSpam)[i],
sep=""))
glmFit = glm(lmFormula, family="binomial",
data=trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit,
costFunction, 2)$delta[2]
}
which.min(cvError)
warnings()
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x, y) {sum(x != (y > 0.5))}
cvError = rep(NA, 55)
library(boot)
for(i in 1:55) {
lmFormula = as.formula(paste("numType~",
names(trainSpam)[i],
sep=""))
glmFit = glm(lmFormula, family="binomial",
data=trainSpam)
cvError[i] = suppressWarnings(cv.glm(trainSpam, glmFit,
costFunction, 2)$delta[2])
}
which.min(cvError)
warnings()
names(trainSpam)[which.min(cvError)]
pwd()
getwd()
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile="./data/cameras.csv", method="curl")
list.files("./data")
download.file(fileUrl, destfile="./data/cameras.csv")
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile="./data/cameras.csv")
download.file(fileUrl, destfile="./data/cameras.csv")
download.file(fileUrl, destfile="./data/cameras.csv")
list.files("./data")
cameraData <- read.table("./data/cameras.csv", sep=",", header=TRUE)
head(cameraData)
comeraData <- read.csv("./data/cameras.csv")
source('~/.active-rstudio-document', echo=TRUE)
fileName = paste0("./data", i, ".csv")
library(XML)
install.packages("XML")
install.packages("RJSONIO")
library(XML)
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
htmlCode
```{r}
splitNames = split(names(cameraData), "\\.")
splitNames[[5]]
splitNames
splitNames[5]
splitNames
splitNames[5]
splitNames = strsplit(names(cameraData), "\\.")
splitNames[5]
splitNames[[5]]
install.packages("Hmisc")
mergedData <- merge(reviews, solutions, all=TRUE)
install.packages(c("survival", "splines"))
install.packages("reshape2")
source('D:/CODE/!CLASSES/Coursera/Data Analysis/Week2/hw/2.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
f1 <- "https://dl.dropbox.com/u/7710864/data/csv_hid/ss06hid.csv"
housingData <- download.file(f1, destfile="./data/housing.csv")
h <- read.csv(housingData)
head(h)
h <- read.csv("./data/housing.csv")
head(h)
head(h$VAL)
table(h$VAL)
table(h$VAL)[24]
table(h$FES, useNA="ifany")
sumamry(h$FES)
sumary(h$FES)
summary(h$FES)
h[h$BDS==3 & h$RMS==4]
h[h$BDS==2 & h$RMS==5]
h[BDS==3 & RMS==4]
h[,h$BDS==3 & h$RMS==4]
h[h$BDS==3 & h$RMS==4,]
h[h$BDS==3 & h$RMS==4,]
table(h[h$BDS==3 & h$RMS==4,])
summary(h[h$BDS==3 & h$RMS==4,])
summary(h[h$BDS==3 & h$RMS==4, c("BDS", "RMS")])
h[h$BDS==3 & h$RMS==4, c("BDS", "RMS")]
nrow(h[h$BDS==3 & h$RMS==4, c("BDS", "RMS")])
a <- nrow(h[h$BDS==3 & h$RMS==4, c("BDS", "RMS")])
b <- nrow(h[h$BDS==2 & h$RMS==5, c("BDS", "RMS")])
c <- nrow(h[h$BDS==2 & h$RMS==7, c("BDS", "RMS")])
sum(c(a, b, c))
nrow(h[h$BDS==3 & h$RMS==4, c("BDS", "RMS")])
nrow(h[h$BDS==2 & h$RMS==5, c("BDS", "RMS")])
nrow(h[h$BDS==2 & h$RMS==7, c("BDS", "RMS")])
nrow(h[h$BDS==3 & h$RMS==4 & !is.na(h$BDS) & !is.na(h$RMS), c("BDS", "RMS")])
nrow(h[h$BDS==2 & h$RMS==5 & !is.na(h$BDS) & !is.na(h$RMS), c("BDS", "RMS")])
nrow(h[h$BDS==2 & h$RMS==7 & !is.na(h$BDS) & !is.na(h$RMS), c("BDS", "RMS")])
is.na
?is.na
h[h$ACR==3 & h$AGS==6 & !is.na(h$ACR) & !is.na(h$AGS)]
h[h$ACR==3 & h$AGS==6 & !is.na(h$ACR) & !is.na(h$AGS), c("ACR", "AGS")]
all(h$ACR==3 & h$AGS==6, c("ACR", "AGS"))
h$ACR==3 & h$AGS==6
h$ACR==3 & h$AGS==6 & !is.na(h$ACR) & !is.na(h$AGS)
households <- h$ACR==3 & h$AGS==6 & !is.na(h$ACR) & !is.na(h$AGS)
which(households)
households <- h$ACR==3 & h$AGS==6
which(households)
agricultureLogical <- h$ACR==3 & h$AGS==6
indexes =  which(agricultureLogical)
subsetDataFrame  = h[indexes,]
is.na(subsetDataFrame$MRGX)
nrows(which(is.na(subsetDataFrame$MRGX)))
nrow(which(is.na(subsetDataFrame$MRGX)))
which(is.na(subsetDataFrame$MRGX))
is.na(subsetDataFrame$MRGX)
subsetDataFrame$MRGX
table(is.na(subsetDataFrame$MRGX))
names(h)
wgtp <- strsplit(names(h), "wgtp")[123]
wgtp
quantile(h$YBL)
quantile(h$YBL, na.rm=T)
quantile(h$YBL, na.rm=F)
f1 <- download.file("https://dl.dropbox.com/u/7710864/data/csv_hid/ss06pid.csv")
f1 <- download.file("https://dl.dropbox.com/u/7710864/data/csv_hid/ss06pid.csv", destfile="./data/population_records.csv")
popd <- read.csv("./data/population_records.csv")
phmerged <- merge(h, popd, by="SERIALNO")
summary(phmerged)
nrow(phmerged)
ncol(phmerged)
phmerged <- merge(h, popd, by.x="SERIALNO")
phmerged <- merge(h, popd, by="SERIALNO", all=T)
nrow(phmerged)
ncol(phmerged)
ph2 <- merge(h, popd, by.x="SERIALNO", by.y="SERIALNO")
nrow(ph2)
ncol(ph2)
dim(phmerged)
?merge
phmerged <- merge(h, popd, by="SERIALNO", all=F)
dim(phmerged)
